AWSTemplateFormatVersion: "2010-09-09"

Description: Write parameters to parameter store

Parameters:
  GitHubUser:
    Description: Enter GitHub username of the repository owner
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "GitHub credentials"
        Parameters:
          - GitHubUser
          - TokenParameterName

Resources:
  GitTokenLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - 
            Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: "/"                
      Policies:
        - 
          PolicyName: lambdalogtocloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - 
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: AccountParameterGet    
          PolicyDocument:
            Version: 2012-10-17           
            Statement:
              - 
                Action:
                  - 'ssm:GetParameter*'
                Effect: Allow
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'

  GetTokenLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json 
          import cfnresponse 
          import boto3          
          def handler(event, context):
            responseData = {}
            if (event['RequestType'] == 'Delete'):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "SSMGitHubToken")            
            elif event['RequestType'] == 'Update' or event['RequestType'] == 'Create':
              ssm = boto3.client('ssm')
              response = ssm.get_parameter(Name=event['ResourceProperties']['SSMTokenName'],WithDecryption=True)
              responseData['Token'] = response['Parameter']['Value']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "SSMGitHubToken")
              return responseData['Token']      
      Description: Get Parameter Store secure value 
      FunctionName: GetTokenLambda
      Handler: index.handler
      Role: !GetAtt GitTokenLambdaRole.Arn
      Runtime: python3.6
      Timeout: 5
      Tags: 
        - 
          Key: Environment
          Value: Production
        - 
          Key: Purpose
          Value: GetToken

  GitHubUserName:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: GITHUBUSER
      Type: String 
      Value: !Ref GitHubUser
      Description: GitHub User
      AllowedPattern: "^[0-9a-zA-Z]{1,30}$"

Outputs:
  GitHubUser:
    Description: GitHub user
    Value: !Ref GitHubUser
    Export:
      Name: !Sub "${AWS::StackName}-GitHubUser"    
  GetTokenLambdaArn:
    Description: ARN of function that return GitHub token 
    Value: !GetAtt GetTokenLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-GetTokenLambdaArn"         
   